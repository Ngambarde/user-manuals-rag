apiVersion: apps/v1
kind: Deployment
metadata:
  name: equipment-rag
  labels:
    app: equipment-rag
spec:
  replicas: 3
  selector:
    matchLabels:
      app: equipment-rag
  template:
    metadata:
      labels:
        app: equipment-rag
    spec:
      containers:
      - name: rag-api
        image: equipment-rag:prod
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: rag-secrets
              key: openai-api-key
        - name: GCP_PROJECT_ID
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: gcp-project-id
        - name: USE_GCS_VECTOR_STORE
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: use-gcs-vector-store
        - name: VECTOR_STORE_BUCKET
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: vector-store-bucket
              optional: true
        - name: VECTOR_STORE_BLOB
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: vector-store-blob
              optional: true
        - name: OPENAI_MODEL
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: openai-model
              optional: true
        - name: MAX_RETRIEVAL_DOCS
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: max-retrieval-docs
              optional: true
        - name: OPENAI_TEMPERATURE
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: openai-temperature
              optional: true
        - name: TIMEOUT_SECONDS
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: timeout-seconds
              optional: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
---
apiVersion: v1
kind: Service
metadata:
  name: equipment-rag-service
  labels:
    app: equipment-rag
spec:
  selector:
    app: equipment-rag
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  type: LoadBalancer
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: equipment-rag-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: equipment-rag
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rag-config
data:
  gcp-project-id: "your-gcp-project-id"
  use-gcs-vector-store: "true"
  vector-store-bucket: "your-project-id-vector-stores"
  vector-store-blob: "faiss_index"
  openai-model: "gpt-4"
  max-retrieval-docs: "5"
  openai-temperature: "0.0"
  timeout-seconds: "60"
---
apiVersion: v1
kind: Secret
metadata:
  name: rag-secrets
type: Opaque
data:
  openai-api-key: <base64-encoded-openai-api-key> 